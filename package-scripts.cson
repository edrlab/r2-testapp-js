  'cson2json': '
    sed -E "s/#ECMASCRIPT#/es5/g" package-scripts-bundle.cson > tmp-bundle.cson &&
    sed -E "s/#ECMASCRIPT#/es6-es2015/g" package-scripts-bundle.cson >> tmp-bundle.cson &&
    sed -E "s/#ECMASCRIPT#/es7-es2016/g" package-scripts-bundle.cson >> tmp-bundle.cson &&
    sed -E "s/#ECMASCRIPT#/es8-es2017/g" package-scripts-bundle.cson >> tmp-bundle.cson &&
    sed -E "s/#ECMASCRIPT#/es5/g" package-scripts-build.cson > tmp-build.cson &&
    sed -E "s/#ECMASCRIPT#/es6-es2015/g" package-scripts-build.cson >> tmp-build.cson &&
    sed -E "s/#ECMASCRIPT#/es7-es2016/g" package-scripts-build.cson >> tmp-build.cson &&
    sed -E "s/#ECMASCRIPT#/es8-es2017/g" package-scripts-build.cson >> tmp-build.cson &&
    json -I -f package.json -e "this.scripts=$(cat package-scripts.cson tmp-build.cson tmp-bundle.cson | node node_modules/cson/bin/cson2json)" &&
    rimraf tmp-*.cson
  '

  'postinstallxx': '
    npm rebuild
      --runtime=electron
      --target=1.7.9
      --disturl=https://atom.io/download/atom-shell
      --build-from-source
  '

  'electron-pack': '
    build
      --publish
      never
  '

  'electron-pack:win': '
    build
      --win
      --x64
  '

  'electron-pack:linux': '
    build
      --linux
  '

  'electron-pack:mac': '
    build
      --mac
  '

  'riot:all': '
    npm run riot:es5 &&
    npm run riot:es6-es2015 &&
    npm run riot:es7-es2016 &&
    npm run riot:es8-es2017
  '

  'preelectron-renderer:all': '
    npm run preelectron-renderer:es5 &&
    npm run preelectron-renderer:es6-es2015 &&
    npm run preelectron-renderer:es7-es2016 &&
    npm run preelectron-renderer:es8-es2017
  '

  'electron-renderer:all': '
    npm run riot:all &&
    cpy "./ReadiumCSS/**/*.*" ../../../dist/ --cwd=./node_modules/r2-navigator-js/dist/ --parents
  '

  'postelectron-renderer:all': '
    npm run bundle:all
  '

  'preelectron': '
    node tools/electronRename.js
  '

  'electron': '
    cross-env
    DEBUG=r2:*
    NODE_ENV=development
    electron
    ./dist/es8-es2017/src/electron/main/index.js
  '

  'preelectron-bundle': '
    npm run preelectron
  '

  'electron-bundle': '
    cross-env
    DEBUG=r2:*
    electron
    ./dist/bundle-es8-es2017/main.js
  '

  '_pregitdist': '
    npm run build:all
  '

  'gitdist': '
    cd ../r2-testapp-js-dist/ &&
    git checkout -B master &&
    git pull &&
    (git status || echo status) &&
    ((rimraf "*" && echo rimrafOK) || echo rimrafNOK) &&
    cpy ../r2-testapp-js/package.json . &&
    cpy ../r2-testapp-js/package-lock.json . &&
    cpy ../r2-testapp-js/LICENSE . &&
    cpy ../r2-testapp-js/README.md . &&
    cpy "docs/**/*.*" ../r2-testapp-js-dist/ --cwd=../r2-testapp-js/ --parents &&
    cpy "dist/**/*.*" ../r2-testapp-js-dist/ --cwd=../r2-testapp-js/ --parents &&
    (git add * || echo add) &&
    (git commit -a -m "add new dist" || echo commit) &&
    (git push --set-upstream origin master || echo push) &&
    (git status || echo status) &&
    cd ../r2-testapp-js
  '

  'start': '
    cross-env DEBUG=r2:*
    node
    "./dist/es6-es2015/src/http/server-cli.js"
    ./misc/epubs/
  '

  'prepare_': '
    npm run build:all &&
    npm test
  '

  'prepublish_': '
    npm run prepare_
  '

  'typescript:imports': '
    node tools/typescript_relativize_path_mapping_imports.js
  '

  'gitrev': '
    node tools/gitrev.js &&
    cat dist/gitrev.json
  '

  'afterdist': '
    npm run typescript:imports &&
    npm run gitrev
  '

  'prebuild': '
    npm run lint
  '

  'build': '
    npm run transpile:typescript
  '

  'postbuild': '
    npm run afterdist &&
    npm run electron-renderer:es8-es2017
  '

  'prebuild:all': '
    npm run lint
  '

  'build:all': '
    npm run transpile:typescript:all
  '

  'postbuild:all': '
    npm run afterdist &&
    npm run electron-renderer:all
  '

  'clean': '
    rimraf ./dist &&
    mkdirp ./dist
  '

  'lint': '
    npm run lint:all &&
    npm run lint:typescript:full
  '

  'lint:all': '
    eclint
      check
      "**/*"
      "!**/*.node"
      "!.git/**/*"
      "!node_modules*/**/*"
      "!dist/**/*"
      "!misc/**/*"
      "!.vscode/**/*"
      "!.history/**/*"
      "!**/.DS_Store"
      "!**/*.epub"
      "!**/*.cbz"
      "!**/*.jpg"
      "!**/*.jpeg"
      "!**/*.png"
      "!**/*.log"
  '

  'lint:typescript': '
    tslint
      -c
      "./tslint.json"
      "./src/**/*.ts"
      "./test/**/*.ts"
  '

  'lint:typescript:full': '
    tslint
      --project
      "./tsconfig.json"
      -c
      "./tslint.json"
      "./src/**/*.ts"
      "./test/**/*.ts"
  '

  'lintfix': '
    sed
      -i
      ""
      "s/let normalizedPath = path\\.normalize(documentPath);/let normalizedPath = path.normalize(documentPath).toLowerCase();/g"
      ./node_modules/tslint-language-service/out/src/index.js
  '

  'pretranspile:typescript': '
    npm run clean
  '

  'transpile:typescript': '
    tsc -p "./tsconfig.json"
  '

  'pretranspile:typescript:all': '
    npm run clean
  '

  'transpile:typescript:all': '
    npm run transpile:typescript:es5 &&
    npm run transpile:typescript:es6-es2015 &&
    npm run transpile:typescript:es7-es2016 &&
    npm run transpile:typescript:es8-es2017
  '

  'transpile:typescript:es8-es2017+afterdist': '
    npm run transpile:typescript:es8-es2017 &&
    npm run afterdist &&
    npm run electron-renderer:es8-es2017
  '

  'transpile:typescript:single': '
    node tools/typescript_compile_single.js
  '

  'posttranspile:typescript:single': '
    npm run afterdist &&
    npm run electron-renderer:es8-es2017
  '

  'bundle:all': '
    npm run bundle:es5 &&
    npm run bundle:es6-es2015 &&
    npm run bundle:es7-es2016 &&
    npm run bundle:es8-es2017
  '

  'bundle:all_': '
    npm run bundle:es5_ &&
    npm run bundle:es6-es2015_ &&
    npm run bundle:es7-es2016_ &&
    npm run bundle:es8-es2017_
  '
